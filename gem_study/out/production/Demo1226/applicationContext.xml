<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 通知通知类bean -->
    <!--    <bean id="mybefore" class="com.gem.demo.advice.MyBeforeAdvice"></bean>
          <bean id="myafter" class="com.gem.demo.advice.MyAfterAdvice"></bean>
          <bean id="mythrow" class="com.gem.demo.advice.MyThorwAdvice"></bean>
          <bean id="mythrow2" class="com.gem.demo.advice.MyThrowAdvice02"></bean>
          <bean id="myround" class="com.gem.demo.advice.MyRoundAdvice"></bean> -->
    <bean id="myadvice" class="com.gem.demo.advice.MyAdvice"> </bean>
    <!-- 配置切面 -->
    <!-- <aop:config > -->

    <!-- *匹配任意方法  任意  类（biz impl）   任意一级包
        ..  匹配任意参数 -->
    <!--  切点 -->
    <!-- 	<aop:pointcut expression="execution(* com.gem.demo.test.Demo.demo01(..))" id="mypointcut"/> -->
    <!-- 前置 通知 -->
    <!-- <aop:advisor advice-ref="mybefore" pointcut-ref="mypointcut" /> -->
    <!-- 后置通知 -->
    <!-- <aop:advisor advice-ref="myafter" pointcut-ref="mypointcut"/> -->
    <!-- 异常通知     基于AspectJ方式-->
    <!-- <aop:aspect ref="mythrow">
        <aop:pointcut expression="execution(* com.gem.demo.test.Demo.demo01(..))" id="mypointcut"/>
        <aop:after-throwing method="myexecption" pointcut-ref="mypointcut" throwing="e"></aop:after-throwing>
    </aop:aspect> -->
    <!-- <aop:advisor advice-ref="mythrow2" pointcut-ref="mypointcut"/> -->
    <!-- <aop:advisor advice-ref="myround" pointcut-ref="mypointcut"/> -->
    <!-- 基于AspectJ -->
    <!-- 切面 -->
    <aop:config >
        <!-- 通知的类 -->
        <aop:aspect ref="myadvice">
            <!-- 切点   指定参数：
            execution(* com.gem.demo.test.Demo.demo01(String,int)) and args(name1,age1)
            通知方法中  arg-names="name1,age1"    “值”args("值") 保持一致
            在通知方法中获取切点方法参数
            -->
            <aop:pointcut expression="execution(* com.gem.demo.test.Demo.demo01(String,int)) and args(name1,age1)" id="mypointcut"/>
            <!-- 通知类型   method：通知要执行的方法    pointcut-ref：引入切点-->
            <aop:before method="mybefore" pointcut-ref="mypointcut" arg-names="name1,age1"/>
            <!-- 		aop:after   aop:after-returning区别     执行顺序与配置顺序相关 -->

            <!-- <aop:after-returning method="myaftering" pointcut-ref="mypointcut"/>
            <aop:after method="myafter" pointcut-ref="mypointcut"/> -->
            <!-- <aop:around method="myround" pointcut-ref="mypointcut"/>
            <aop:after-throwing method="myexception" pointcut-ref="mypointcut"/> -->
        </aop:aspect>
    </aop:config>
    <!-- 测试类对象，调用切点 -->
    <bean id="demo" class="com.gem.demo.test.Demo"></bean>

</beans>